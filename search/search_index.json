{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pymata Express The User's Guide Pymata Express is a fast and streamlined Firmata client used to control Arduino micro-controllers remotely from a Windows, Linux (including Raspberry Pi) or macOS computer. It is implemented using the Python 3.7 asyncio library library. Pymata Express supports concurrency (running multiple things simultaneously) by taking advantage of asyncio tasks, simplifying program design. When used with the FirmataExpress Arduino sketch, data is transmitted over the serial link at 115200 baud, twice as fast as StandardFirmata, as well as supporting stepper motors, tone generation, HC-SRO4 distance sensors, and auto-detection of Arduino boards. FirmataExpress is based on StandardFirmata 2.5.8 and Pymata Express implements the full StandardFirmata 2.5.8 protocol . If you prefer to work with StandardFirmata or other slower sketches, Pymata Express is compatible with those slower versions as well. Both full API documentation and a set of working examples are provided as part of this documentation.","title":"User's Guide"},{"location":"about/","text":"REPORTING ISSUES If you wish to report an issue with Pymata Express please use this link . For FirmataExpress, please use this link . When filing an issue, please provide any console output, a description of the issue, and a some code so that the problem can be reproduced. If you have any questions about Pymata Express or FirmataExpress, you may also use the issues links to do that as well. TROUBLESHOOTING TIPS Powering both Arduino connected devices (such as motors) and the Arduino micro-controller from your computer's USB connector may exceed the maximum current capabilities of the USB port. In those cases, use a separate power supply for the connected device. When insufficient power is available, you may see an exception traceback that looks similar to the following: Traceback (most recent call last): File \"/home/afy/PycharmProjects/pymata-express/examples/pymata_express/servo.py\", line 44, in <module> loop.run_until_complete(servo(board, 5)) File \"/usr/local/lib/python3.7/asyncio/base_events.py\", line 584, in run_until_complete return future.result() concurrent.futures._base.CancelledError This exception was caused while operating a servo motor. Connecting an external supply for the motor solved the issue.","title":"About"},{"location":"about/#reporting-issues","text":"If you wish to report an issue with Pymata Express please use this link . For FirmataExpress, please use this link . When filing an issue, please provide any console output, a description of the issue, and a some code so that the problem can be reproduced. If you have any questions about Pymata Express or FirmataExpress, you may also use the issues links to do that as well.","title":"REPORTING ISSUES"},{"location":"about/#troubleshooting-tips","text":"Powering both Arduino connected devices (such as motors) and the Arduino micro-controller from your computer's USB connector may exceed the maximum current capabilities of the USB port. In those cases, use a separate power supply for the connected device. When insufficient power is available, you may see an exception traceback that looks similar to the following: Traceback (most recent call last): File \"/home/afy/PycharmProjects/pymata-express/examples/pymata_express/servo.py\", line 44, in <module> loop.run_until_complete(servo(board, 5)) File \"/usr/local/lib/python3.7/asyncio/base_events.py\", line 584, in run_until_complete return future.result() concurrent.futures._base.CancelledError This exception was caused while operating a servo motor. Connecting an external supply for the motor solved the issue.","title":"TROUBLESHOOTING TIPS"},{"location":"api/","text":"The full API Documentation can be viewed by clicking here. To open in a new window or tab, right click and select how to open this link.","title":"Pymata Express API"},{"location":"api/#the-full-api-documentation-can-be-viewed-by-clicking-here","text":"To open in a new window or tab, right click and select how to open this link.","title":"The full API Documentation can be viewed by clicking here."},{"location":"examples/","text":"A WORD ABOUT UNIT TESTS You may have noticed that this distribution does not come with a set of unit tests. The reason for this is simple. To truly test the Pymata Express library requires that hardware devices be connected to the Arduino, and interaction of Pymata Express with these devices needs to be physically observed. Therefore, in lieu of the traditional unit tests, the examples provided with the distribution act as unit tests. They interact with the hardware and the results of this interaction may be easily observed and verified. If changes need to be made to the library, the example programs will be re-run to ensure that the hardware and the library behave as expected. If additional features are required in the future, additional examples will be provided to test those new features. EXAMPLE APPLICATIONS analog_input analog_output concurrent_tasks digital_input digital_input_pullup digital_output digital_pin_ouput hc-sr04_distance_sensor i2c_adxl345_accelerometer play_tone retrieve_analog_map retrieve_capbaility_report retrieve_firmware_version retrieve_pin_state retrieve_protocol_version servo stepper","title":"Example Applications/Tests"},{"location":"examples/#a-word-about-unit-tests","text":"You may have noticed that this distribution does not come with a set of unit tests. The reason for this is simple. To truly test the Pymata Express library requires that hardware devices be connected to the Arduino, and interaction of Pymata Express with these devices needs to be physically observed. Therefore, in lieu of the traditional unit tests, the examples provided with the distribution act as unit tests. They interact with the hardware and the results of this interaction may be easily observed and verified. If changes need to be made to the library, the example programs will be re-run to ensure that the hardware and the library behave as expected. If additional features are required in the future, additional examples will be provided to test those new features.","title":"A WORD ABOUT UNIT TESTS"},{"location":"examples/#example-applications","text":"","title":"EXAMPLE APPLICATIONS"},{"location":"examples/#analog_input","text":"","title":"analog_input"},{"location":"examples/#analog_output","text":"","title":"analog_output"},{"location":"examples/#concurrent_tasks","text":"","title":"concurrent_tasks"},{"location":"examples/#digital_input","text":"","title":"digital_input"},{"location":"examples/#digital_input_pullup","text":"","title":"digital_input_pullup"},{"location":"examples/#digital_output","text":"","title":"digital_output"},{"location":"examples/#digital_pin_ouput","text":"","title":"digital_pin_ouput"},{"location":"examples/#hc-sr04_distance_sensor","text":"","title":"hc-sr04_distance_sensor"},{"location":"examples/#i2c_adxl345_accelerometer","text":"","title":"i2c_adxl345_accelerometer"},{"location":"examples/#play_tone","text":"","title":"play_tone"},{"location":"examples/#retrieve_analog_map","text":"","title":"retrieve_analog_map"},{"location":"examples/#retrieve_capbaility_report","text":"","title":"retrieve_capbaility_report"},{"location":"examples/#retrieve_firmware_version","text":"","title":"retrieve_firmware_version"},{"location":"examples/#retrieve_pin_state","text":"","title":"retrieve_pin_state"},{"location":"examples/#retrieve_protocol_version","text":"","title":"retrieve_protocol_version"},{"location":"examples/#servo","text":"","title":"servo"},{"location":"examples/#stepper","text":"","title":"stepper"},{"location":"firmata_express/","text":"INSTALLATION INSTRUCTIONS Open the Arduino IDE, and select Tools/Manage Libraries 1. Open the Arduino IDE, and select Tools/Manage Libraries. 2. Enter \"FirmataExpress in the search box. 3. Click on the Install button. 4. FirmataExpress also requires that the Ultrasonic library by Erick Sim\u00f5es be installed. Using the Arduino IDE install the ultrasonic library . Click on Tools/Manage Libraries and select Ultrasonic and then click Install. SETTING THE FirmataExpress INSTANCE ID FirmataExpress, in conjunction with PyMata Express has the ability to automatically associate a Pymata Express application with a specific Arduino board that is plugged into your computer. If you only have a single Arduino connected at a time, you do not need to do anything. However if you have multiple Arduinos connected to your computer, to associate a Pymata Express application with a specific board, you must set matching ID numbers in both the FirmataExpress sketch, and specify that number when instantiating PymataExpress. The Pymata Express parameter is discussed here . To set the ID number in FirmataExpress, load the FirmataExpress sketch into the Arduino IDE and look for the following line: #define ARDUINO_INSTANCE_ID 1 Modify the value of 1 to the matching number you will use with Pymata Express. You may then compile and upload FirmataExpress to your Arduino.","title":"FirmataExpress Installation"},{"location":"firmata_express/#installation-instructions","text":"Open the Arduino IDE, and select Tools/Manage Libraries 1. Open the Arduino IDE, and select Tools/Manage Libraries. 2. Enter \"FirmataExpress in the search box. 3. Click on the Install button. 4. FirmataExpress also requires that the Ultrasonic library by Erick Sim\u00f5es be installed. Using the Arduino IDE install the ultrasonic library . Click on Tools/Manage Libraries and select Ultrasonic and then click Install.","title":"INSTALLATION INSTRUCTIONS"},{"location":"firmata_express/#setting-the-firmataexpress-instance-id","text":"FirmataExpress, in conjunction with PyMata Express has the ability to automatically associate a Pymata Express application with a specific Arduino board that is plugged into your computer. If you only have a single Arduino connected at a time, you do not need to do anything. However if you have multiple Arduinos connected to your computer, to associate a Pymata Express application with a specific board, you must set matching ID numbers in both the FirmataExpress sketch, and specify that number when instantiating PymataExpress. The Pymata Express parameter is discussed here . To set the ID number in FirmataExpress, load the FirmataExpress sketch into the Arduino IDE and look for the following line: #define ARDUINO_INSTANCE_ID 1 Modify the value of 1 to the matching number you will use with Pymata Express. You may then compile and upload FirmataExpress to your Arduino.","title":"SETTING THE FirmataExpress INSTANCE ID"},{"location":"guidelines/","text":"THE PYMATA EXPRESS CLASS PARAMETERS In most cases, when you create an instance of the PymataExpress class, you can accept the default parameters offered in its __init__ method. However, it is important to understand what those parameters do, so that you can customize the behavior of the class to best fit your needs. To aid in this discussion, here is the signature for the PymataExpress class: class PymataExpress: \"\"\" This class exposes and implements the PymataExpress API. It includes the public API methods as well as a set of private methods. This is an asyncio API \"\"\" # noinspection PyPep8 def __init__(self, com_port=None, baud_rate=115200, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True): PARAMETERS: com_port and baud_rate These 2 parameters are used in tandem to specify how Pymata Express performs serial port connectivity and Arduino auto-discovery. Accepting The Default Values By accepting the defaults, PymataExpress will attempt its auto-discovery procedures to locate and connect to an Arduino. This assumes that you have the FirmataExpress sketch uploaded to the Arduino. Specifying The Com Port Explicitly With A Baud Rate of 115200 This configuration assumes that the FirmataExpress sketch has been uploaded to the Arduino. Auto-discovery is bypassed, however the arduino_instance_id value is still validated to be a match with the value specified in the FirmataExpress sketch. See the arudino_instance_id discussion below. If the instance id match is successful, the connection succeeds. If not, a RuntimeError exception is raised. Using Firmata Sketches That Run At 57600 When using these sketches, you must specify both com_port and baudrate explicitly. No auto-discovery is performed, and a connection will be attempted using the values specified. PARAMETER: arduino_instance_id If the baud rate is set to 115200, it is assumed that FirmataExpress has been uploaded to the Arduino. To verify that the correct com port was either chosen by auto-discovery, or that it was correctly specified using the com_port parameter, Pymata Express, will send a query message to the Arduino to return its \"ARDUINO INSTANCE\" id number. Pymata Express compares the 2 values and if they match, instantiation proceeds. If you change the value of this parameter from its default of a value of 1, you must also modify the FirmataPlus sketch to provide a matching value. Instructions to do this are provided here . If the baud rate is set to a value other than 115200, this parameter is ignored. PARAMETER: arduino_wait This is the amount of time allowed for an Arduino and the uploaded Firmata sketch to complete its reset cycle. If you are having problems connecting to the Arduino, and you are certain that you both have a serial USB cable properly connected and have specified both com_port and baud_rate correctly, you may wish to increase this value. PARAMETER: sleep_tune In general, you should not adjust this value. It is used to set a very short asyncio.sleep time to allow critical portions of Pymata Express to pass control back to the event loop. PARAMETER: autostart When set to True (the default), the __init__ method will call the start() method automatically. The start() method establishes and connects to the serial port, starts an asyncio task to receive serial data from the Arduino, performs a pin discovery function to determine the total number of digital and analog pins supported by the connected Arduino device, and then accepts both serial reporting data from the Arduino while processing Pymata Express API calls from your application. If you set this parameter to False, it allows you to determine when the functionality listed in the previous paragraph begins. The start() method is a non-asyncio method. If you require an asyncio method, the start-aio() method performs the same functionality as start(). PARAMETER: loop If you wish to provide your own asyncio event loop, you may specify it using this parameter. PARAMETER: shutdown_on_exception By accepting the default of True, when Pymata Express raises a RunTimeError exception, the shutdown() method is called. This will stop the asyncio event loop, disable all Arduino port reporting, and close the serial port. If you prefer to handle the RunTimeError exceptions totally within your application, set this parameter to False. SOME APPLICATION GUIDELINES Before examining a few of the examples in detail, let's look at some coding guidelines you may wish to employ. CALLBACKS VERSUS POLLING Callbacks The Arduino reports data changes to PymataExpress asynchronously as they occur. To receive these notifications, you application provides its own callback function or method. This method is specified when you set the pin mode for an input type pin. The callback function or method you create must be of async type and must provide a data parameter. async def the_callback(data): \"\"\" A callback function to report data changes. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" # YOUR PROCESSING CODE GOES HERE The callback data parameter consists of a list of 4 items: The PIN number The reported VALUE change for that pin The MODE of that pin A TIMESTAMP when the change occurred. Here is the callback used in the digital_input example : async def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[3])) print('Pin: {} Value: {} Time Stamp: {}'.format(data[0], data[1], date)) Here is a sample of the output of this callback function: Pin: 12 Value: 1 Time Stamp: 2019-01-12 10:30:23 When the value change notification is sent from the Arduino, this function will print the pin number, value change, and the time that the change occurred in a human readable format. You may have one or more callback function defined to handle the callbacks. If you need to determine the pin mode in your callback function or method, here is a list of mode types: INPUT = 0x00 # pin set as input OUTPUT = 0x01 # pin set as output ANALOG = 0x02 # analog pin in analogInput mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup STEPPER = 0x08 # any pin in stepper mode PULLUP = 0x0b # Any pin in pullup mode SONAR = 0x0c # Any pin in SONAR mode TONE = 0x0d # Any pin in tone mode Polling Using a callback is the preferred method of receiving Arduino reporting data, but you may optionally poll for data changes as well. Each time a data change is reported for an input pin, the pin, value, mode and timestamp are stored internally within PymataExpress. You may retrieve those values any time using one of the read methods. analog_read digital_read digital_pin_read i2c_read_saved_data sonar_read You many utilize both callbacks and polling within the same application. EXAMINING SOME OF THE EXAMPLES To illustrate different approaches that may be used in coding Pymata Express applications, we will look explore a few of the examples provided with the distribution. Before we look at the examples, let's discuss a generalized coding template that is used by all of the examples. An Application Coding Template import asyncio import sys from pymata_express.pymata_express import PymataExpress # YOUR APPLICATION GOES HERE # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() try: # start the main function of your application loop.run_until_complete(YOUR_APPLICATION) except (KeyboardInterrupt, RuntimeError): loop.run_until_complete(board.shutdown()) sys.exit(0) The template above provides a good starting point when developing a Pymata Express application. It begins by importing both asyncio and the PymataExpress class. The template imports sys as well, so that sys.exit(0) can be called when either the program finishes or the user presses a Control-C. This is shown at the bottom of the template. Your application code follows the imports. We will see illustrations of this when we cover the examples below. Next, the current running asyncio event loop is retrieved: loop = asyncio.get_event_loop() The loop is used both to start the application loop.run_until_complete(YOUR_APPLICATION) and to cleanly shut the application down. loop.run_until_complete(board.shutdown()) PymataExpress is then instantiated: board = PymataExpress() If you are using an asyncio function or method as your program's starting point, the function or method is wrapped in the asyncio method run_until_complete . loop.run_until_complete(YOUR_APPLICATION) Finally, an exception handler is provided to cleanly shutdown the program if an exception should be thrown. except (KeyboardInterrupt, RuntimeError): loop.run_until_complete(board.shutdown()) sys.exit(0) A Word About Calling shutdown() It is considered good practice to call shutdown when exiting your application. Shutdown not only gracefully closes the asyncio event loop and serial port, but also disables all reporting from the arduino. If you have a set a pin mode to one of the input modes, the Arduino will continue to supply pin data changes even after your program is halted. If reports are not disabled, then the next time you start your program, the reporting data from the previous run can be received and incorrectly interrupted, resulting in an exception to be thrown. Calling shutdown explicitly prevents this from happening. A Word Of Caution About Using The asyncio.run() Method Python 3.7 provides a new way of starting an asyncio program using the asyncio.run() method. import asyncio async def main(): print('Hello ...') await asyncio.sleep(1) print('... World!') # Python 3.7+ asyncio.run(main()) When using PymataExpress, you probably should not use this construct. Here is why. If you look at the documentation for this method , it explicitly states: This function cannot be called when another asyncio event loop is running in the same thread. When you instantiate the PymataExpress class, an event loop will be running. Using the asyncio.run() method will invoke a second event loop, and your program most likely will not run properly. So what is the proper way to start a PymataExpress application? Let's look at some examples. Calling Pymata Express Async Methods From A Non-Async Function The simplest form of a PymataExpress application simply calls PymataExpress API methods directly from the main application file. Since the API methods are asyncio methods, we need to make the call \"asyncio\" compatible from a non-asyncio main. Let's look at the play_tone.py example to illustrate this. import asyncio import sys from pymata_express.pymata_express import PymataExpress # This is a demonstration of the tone methods # retrieve the event loop loop = asyncio.get_event_loop() # instantiate pymata express board = PymataExpress() try: # set a pin's mode for tone operations loop.run_until_complete(board.set_pin_mode_tone(3)) # specify pin, frequency and duration and play tone loop.run_until_complete(board.play_tone(3, 1000, 500)) loop.run_until_complete(asyncio.sleep(2)) # specify pin and frequency and play continuously loop.run_until_complete(board.play_tone_continuously(3, 2000)) loop.run_until_complete(asyncio.sleep(2)) # specify pin to turn pin off loop.run_until_complete(board.play_tone_off(3)) # clean up loop.run_until_complete(board.shutdown()) except KeyboardInterrupt: loop.run_until_complete(board.shutdown()) sys.exit(0) Here we see an example of using the coding template described above . In addition there are several examples of wrapping the PymataExpress API calls using loop.run_until.complete . This allows us to directly call the PymataExpress async API methods. loop.run_until_complete(board.play_tone(3, 1000, 500)) To use this method, we first needed to get the current event_loop: retrieve the event loop loop = asyncio.get_event_loop() And then use the loop to call run_until_complete: # set a pin's mode for tone operations loop.run_until_complete(board.set_pin_mode_tone(3)) The line above sets pin 3's mode to tone mode . The loop_run_until_complete method schedules the method to be run. When that method completes, the next line of code in the script executes. This is very similar to coding a non-asyncio application. NOTE: If the method you are calling contains, a while True: loop, the method will never return. After performing several direct calls to the APIa graceful shutdown of the application is performed. Creating Your Own Asyncio Functions That Call The PymataExpress API Another method of creating a PymataExpress application, is to create your own asyncio functions that will call the API methods within themselves. Let's look at the analog_input.py example to illustrate. import asyncio import sys from pymata_express.pymata_express import PymataExpress # Setup a pin for analog input and monitor its changes async def the_callback(data): \"\"\" A callback function to report data changes. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" print(\"analog callback data: \", data[1]) async def analog_in(my_board, pin): \"\"\" This function establishes the pin as an analog input. Any changes on this pin will be reported through the call back function. Also, the differential parameter is being used. The callback will only be called when there is difference of 5 or more between the current and last value reported. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" await my_board.set_pin_mode_analog_input(pin, callback=the_callback, differential=5) # run forever waiting for input changes while True: await asyncio.sleep(1) # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() try: # start the main function loop.run_until_complete(analog_in(board, 2)) except (KeyboardInterrupt, RuntimeError) as e: loop.run_until_complete(board.shutdown()) sys.exit(0) This example sets a pin to analog input mode. It provides a callback function to handle data sent from the Arduino, and an asyncio function called analog_in that forms the main asyncio body of our program. The program begins by retrieving the event loop and then instantiates the PymataExpress class: # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() Next it invokes our main asyncio method, analog_in : # start the main function loop.run_until_complete(analog_in(board, 2)) The PymataExpress instance is passed to this function as the first parameter and the pin number we wish to use as the second parameter. Let's look at analog_in : async def analog_in(my_board, pin): \"\"\" This function establishes the pin as an analog input. Any changes on this pin will be reported through the call back function. Also, the differential parameter is being used. The callback will only be called when there is difference of 5 or more between the current and last value reported. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" await my_board.set_pin_mode_analog_input(pin, callback=the_callback, differential=5) # run forever waiting for input changes while True: await asyncio.sleep(1) This method sets the pin mode for the pin we select to be an analog input pin. We pass set_pin_mode_analog_input , a PymataExpress API method, three parameters - the pin number, a callback method, and a differential value. The differential Value Parameter When a pin's mode is set to analog input, the Arduino will immediately begin streaming the data value for that pin. It does this continuously whether the value changes or not. We may wish to throttle when the callback function or method is called by comparing the current value sent by the Arduino and the difference between the last and the current values. If the differential threshold value is exceeded, the callback will be invoked. So for example, let's say we wish to only have the callback function invoked when there is a value difference of 5 between the latest value and the previous one. To do so, we set the differential parameter to 5, and if the last value for example was 1020, the callback will be invoked if the latest value exceeds either 1015 or 1020. The default differential value is 1, but if you wish to receive all streaming data, set it to 0. The While Loop Notice that this program will run forever until the user exits it by entering a Control-C on the keyboard. The loop sleeps for one second and uses the asyncio.sleep method to do so. NOTE: You must use asyncio.sleep when you wish to call sleep from within an asyncio function or method. Since the loop does not perform any other processing, the sleep time could be set to any value. The program does not wait for a second to receive the next data change. The data change is reported immediately in the callback function. The sleep just keeps the event loop up and running, allowing all other asyncio functions to run. The Callback Function This is a simple asyncio function that simply prints out the latest data value. Creating An Application That Consists Of A Set Of Concurrent Tasks One of the main reasons to use asyncio is to have the ability to build an application requiring concurrency, in a simple and direct way. This is illustrated in the concurrent_tasks.py example. import asyncio from pymata_express.pymata_express import PymataExpress class ConcurrentTasks: \"\"\" This program will run 3 concurrent asyncio tasks: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value \"\"\" def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task async def blink_led_1(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 async def blink_led_2(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 # Retrieve the asyncio event loop - used by exception loop = asyncio.get_event_loop() # Instantiate PyMataExpress my_board = PymataExpress() try: # Instantiate this class, passing in the # PymataExpress instance. ConcurrentTasks(my_board) except (KeyboardInterrupt, RuntimeError): # cleanup loop.run_until_complete(my_board.shutdown()) print('goodbye') This is a slightly more complex example in that the program uses a class to house its code. Let's look at it in some detail: As in the previous examples discussed, the coding template is used as a basis. At the top of of the file, modules are imported and the definition of the ConcurrentTasks class is specified. ConcurrentTasks Class class ConcurrentTasks: \"\"\" This program will run 3 concurrent asyncio tasks: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value \"\"\" def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task async def blink_led_1(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 async def blink_led_2(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 The 3 concurrent tasks are created and run within the ConcurrentTasks class. These tasks are: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value Each task is implemented as a method within the ConcurrentTasks class. The __init__ Method def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) This method accepts a PymataExpress instance to be used by the methods within the class. It establishes names for the various pins being used and then starts the program by calling the async_init_and_run method of the class. Because async_init_and_run is an async method, it is wrapped with run_until_complete : loop.run_until_complete(self.async_init_and_run()) A Callback Method The class contains a callback method called potentiometer_change_callback .: async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) This method receives the latest changes to the potentiometer values reported by the Arduino, and then scales the reported value to be between 0 and 127 so that it can control the intensity of the green LED. This is one of the 3 concurrent tasks that run simultaneously The Two Additional Task Methods In addition to the callback method, the class contains 2 additional methods that will also be invoked as independent, concurrent tasks. Each of these methods ( blink_led_1 and blink_led_2 ) blink an LED at an independent rate. These 2 tasks will run in tandem with the callback task. The Main Method The main method of this class is named async_init_and_run . It sets the pin modes for the various pins, and for potentiometer pin, specifies the callback method for the potentiometer pin. NOTE: When the callback method is passed as a parameter to set_pin_mode_analog_input , only its name is used and not the parentheses. await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) Next, the blink tasks are created. The callback task is considered part of the main task, and so it does not have to be explicitly created and run. The tasks are created using the asyncio create_task task method, and then the tasks are started by awaiting each task. async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task At the bottom of the file, the event loop is retrieved, and an instance of PymataExpress is created. The ConcurrentTasks class is instantiated, passing it the PymataExpress instance. # Retrieve the asyncio event loop - used by exception loop = asyncio.get_event_loop() # Instantiate PyMataExpress my_board = PymataExpress() try: # Instantiate this class, passing in the # PymataExpress instance. ConcurrentTasks(my_board) except (KeyboardInterrupt, RuntimeError): # cleanup loop.run_until_complete(my_board.shutdown()) print('goodbye') The blink tasks will run forever, and whenever the Arduino sends a data change report for the potentiometer, it will be processed as well. This program runs very efficiently. On a Linux computer running an Intel Core i5-2500K CPU at 3.30GHz, CPU utilization is 5%.","title":"Pymata Express Application Development"},{"location":"guidelines/#the-pymata-express-class-parameters","text":"In most cases, when you create an instance of the PymataExpress class, you can accept the default parameters offered in its __init__ method. However, it is important to understand what those parameters do, so that you can customize the behavior of the class to best fit your needs. To aid in this discussion, here is the signature for the PymataExpress class: class PymataExpress: \"\"\" This class exposes and implements the PymataExpress API. It includes the public API methods as well as a set of private methods. This is an asyncio API \"\"\" # noinspection PyPep8 def __init__(self, com_port=None, baud_rate=115200, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True):","title":"THE PYMATA EXPRESS CLASS PARAMETERS"},{"location":"guidelines/#parameters-com_port-and-baud_rate","text":"These 2 parameters are used in tandem to specify how Pymata Express performs serial port connectivity and Arduino auto-discovery.","title":"PARAMETERS: com_port and baud_rate"},{"location":"guidelines/#accepting-the-default-values","text":"By accepting the defaults, PymataExpress will attempt its auto-discovery procedures to locate and connect to an Arduino. This assumes that you have the FirmataExpress sketch uploaded to the Arduino.","title":"Accepting The Default Values"},{"location":"guidelines/#specifying-the-com-port-explicitly-with-a-baud-rate-of-115200","text":"This configuration assumes that the FirmataExpress sketch has been uploaded to the Arduino. Auto-discovery is bypassed, however the arduino_instance_id value is still validated to be a match with the value specified in the FirmataExpress sketch. See the arudino_instance_id discussion below. If the instance id match is successful, the connection succeeds. If not, a RuntimeError exception is raised.","title":"Specifying The Com Port Explicitly With A Baud Rate of 115200"},{"location":"guidelines/#using-firmata-sketches-that-run-at-57600","text":"When using these sketches, you must specify both com_port and baudrate explicitly. No auto-discovery is performed, and a connection will be attempted using the values specified.","title":"Using Firmata Sketches That Run At 57600"},{"location":"guidelines/#parameter-arduino_instance_id","text":"If the baud rate is set to 115200, it is assumed that FirmataExpress has been uploaded to the Arduino. To verify that the correct com port was either chosen by auto-discovery, or that it was correctly specified using the com_port parameter, Pymata Express, will send a query message to the Arduino to return its \"ARDUINO INSTANCE\" id number. Pymata Express compares the 2 values and if they match, instantiation proceeds. If you change the value of this parameter from its default of a value of 1, you must also modify the FirmataPlus sketch to provide a matching value. Instructions to do this are provided here . If the baud rate is set to a value other than 115200, this parameter is ignored.","title":"PARAMETER: arduino_instance_id"},{"location":"guidelines/#parameter-arduino_wait","text":"This is the amount of time allowed for an Arduino and the uploaded Firmata sketch to complete its reset cycle. If you are having problems connecting to the Arduino, and you are certain that you both have a serial USB cable properly connected and have specified both com_port and baud_rate correctly, you may wish to increase this value.","title":"PARAMETER: arduino_wait"},{"location":"guidelines/#parameter-sleep_tune","text":"In general, you should not adjust this value. It is used to set a very short asyncio.sleep time to allow critical portions of Pymata Express to pass control back to the event loop.","title":"PARAMETER: sleep_tune"},{"location":"guidelines/#parameter-autostart","text":"When set to True (the default), the __init__ method will call the start() method automatically. The start() method establishes and connects to the serial port, starts an asyncio task to receive serial data from the Arduino, performs a pin discovery function to determine the total number of digital and analog pins supported by the connected Arduino device, and then accepts both serial reporting data from the Arduino while processing Pymata Express API calls from your application. If you set this parameter to False, it allows you to determine when the functionality listed in the previous paragraph begins. The start() method is a non-asyncio method. If you require an asyncio method, the start-aio() method performs the same functionality as start().","title":"PARAMETER: autostart"},{"location":"guidelines/#parameter-loop","text":"If you wish to provide your own asyncio event loop, you may specify it using this parameter.","title":"PARAMETER: loop"},{"location":"guidelines/#parameter-shutdown_on_exception","text":"By accepting the default of True, when Pymata Express raises a RunTimeError exception, the shutdown() method is called. This will stop the asyncio event loop, disable all Arduino port reporting, and close the serial port. If you prefer to handle the RunTimeError exceptions totally within your application, set this parameter to False.","title":"PARAMETER: shutdown_on_exception"},{"location":"guidelines/#some-application-guidelines","text":"Before examining a few of the examples in detail, let's look at some coding guidelines you may wish to employ.","title":"SOME APPLICATION GUIDELINES"},{"location":"guidelines/#callbacks-versus-polling","text":"","title":"CALLBACKS VERSUS POLLING"},{"location":"guidelines/#callbacks","text":"The Arduino reports data changes to PymataExpress asynchronously as they occur. To receive these notifications, you application provides its own callback function or method. This method is specified when you set the pin mode for an input type pin. The callback function or method you create must be of async type and must provide a data parameter. async def the_callback(data): \"\"\" A callback function to report data changes. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" # YOUR PROCESSING CODE GOES HERE The callback data parameter consists of a list of 4 items: The PIN number The reported VALUE change for that pin The MODE of that pin A TIMESTAMP when the change occurred. Here is the callback used in the digital_input example : async def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[3])) print('Pin: {} Value: {} Time Stamp: {}'.format(data[0], data[1], date)) Here is a sample of the output of this callback function: Pin: 12 Value: 1 Time Stamp: 2019-01-12 10:30:23 When the value change notification is sent from the Arduino, this function will print the pin number, value change, and the time that the change occurred in a human readable format. You may have one or more callback function defined to handle the callbacks. If you need to determine the pin mode in your callback function or method, here is a list of mode types: INPUT = 0x00 # pin set as input OUTPUT = 0x01 # pin set as output ANALOG = 0x02 # analog pin in analogInput mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup STEPPER = 0x08 # any pin in stepper mode PULLUP = 0x0b # Any pin in pullup mode SONAR = 0x0c # Any pin in SONAR mode TONE = 0x0d # Any pin in tone mode","title":"Callbacks"},{"location":"guidelines/#polling","text":"Using a callback is the preferred method of receiving Arduino reporting data, but you may optionally poll for data changes as well. Each time a data change is reported for an input pin, the pin, value, mode and timestamp are stored internally within PymataExpress. You may retrieve those values any time using one of the read methods. analog_read digital_read digital_pin_read i2c_read_saved_data sonar_read You many utilize both callbacks and polling within the same application.","title":"Polling"},{"location":"guidelines/#examining-some-of-the-examples","text":"To illustrate different approaches that may be used in coding Pymata Express applications, we will look explore a few of the examples provided with the distribution. Before we look at the examples, let's discuss a generalized coding template that is used by all of the examples.","title":"EXAMINING SOME OF THE EXAMPLES"},{"location":"guidelines/#an-application-coding-template","text":"import asyncio import sys from pymata_express.pymata_express import PymataExpress # YOUR APPLICATION GOES HERE # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() try: # start the main function of your application loop.run_until_complete(YOUR_APPLICATION) except (KeyboardInterrupt, RuntimeError): loop.run_until_complete(board.shutdown()) sys.exit(0) The template above provides a good starting point when developing a Pymata Express application. It begins by importing both asyncio and the PymataExpress class. The template imports sys as well, so that sys.exit(0) can be called when either the program finishes or the user presses a Control-C. This is shown at the bottom of the template. Your application code follows the imports. We will see illustrations of this when we cover the examples below. Next, the current running asyncio event loop is retrieved: loop = asyncio.get_event_loop() The loop is used both to start the application loop.run_until_complete(YOUR_APPLICATION) and to cleanly shut the application down. loop.run_until_complete(board.shutdown()) PymataExpress is then instantiated: board = PymataExpress() If you are using an asyncio function or method as your program's starting point, the function or method is wrapped in the asyncio method run_until_complete . loop.run_until_complete(YOUR_APPLICATION) Finally, an exception handler is provided to cleanly shutdown the program if an exception should be thrown. except (KeyboardInterrupt, RuntimeError): loop.run_until_complete(board.shutdown()) sys.exit(0)","title":"An Application Coding Template"},{"location":"guidelines/#a-word-about-calling-shutdown","text":"It is considered good practice to call shutdown when exiting your application. Shutdown not only gracefully closes the asyncio event loop and serial port, but also disables all reporting from the arduino. If you have a set a pin mode to one of the input modes, the Arduino will continue to supply pin data changes even after your program is halted. If reports are not disabled, then the next time you start your program, the reporting data from the previous run can be received and incorrectly interrupted, resulting in an exception to be thrown. Calling shutdown explicitly prevents this from happening.","title":"A Word About Calling shutdown()"},{"location":"guidelines/#a-word-of-caution-about-using-the-asynciorun-method","text":"Python 3.7 provides a new way of starting an asyncio program using the asyncio.run() method. import asyncio async def main(): print('Hello ...') await asyncio.sleep(1) print('... World!') # Python 3.7+ asyncio.run(main()) When using PymataExpress, you probably should not use this construct. Here is why. If you look at the documentation for this method , it explicitly states: This function cannot be called when another asyncio event loop is running in the same thread. When you instantiate the PymataExpress class, an event loop will be running. Using the asyncio.run() method will invoke a second event loop, and your program most likely will not run properly. So what is the proper way to start a PymataExpress application? Let's look at some examples.","title":"A Word Of Caution About Using The asyncio.run() Method"},{"location":"guidelines/#calling-pymata-express-async-methods-from-a-non-async-function","text":"The simplest form of a PymataExpress application simply calls PymataExpress API methods directly from the main application file. Since the API methods are asyncio methods, we need to make the call \"asyncio\" compatible from a non-asyncio main. Let's look at the play_tone.py example to illustrate this. import asyncio import sys from pymata_express.pymata_express import PymataExpress # This is a demonstration of the tone methods # retrieve the event loop loop = asyncio.get_event_loop() # instantiate pymata express board = PymataExpress() try: # set a pin's mode for tone operations loop.run_until_complete(board.set_pin_mode_tone(3)) # specify pin, frequency and duration and play tone loop.run_until_complete(board.play_tone(3, 1000, 500)) loop.run_until_complete(asyncio.sleep(2)) # specify pin and frequency and play continuously loop.run_until_complete(board.play_tone_continuously(3, 2000)) loop.run_until_complete(asyncio.sleep(2)) # specify pin to turn pin off loop.run_until_complete(board.play_tone_off(3)) # clean up loop.run_until_complete(board.shutdown()) except KeyboardInterrupt: loop.run_until_complete(board.shutdown()) sys.exit(0) Here we see an example of using the coding template described above . In addition there are several examples of wrapping the PymataExpress API calls using loop.run_until.complete . This allows us to directly call the PymataExpress async API methods. loop.run_until_complete(board.play_tone(3, 1000, 500)) To use this method, we first needed to get the current event_loop: retrieve the event loop loop = asyncio.get_event_loop() And then use the loop to call run_until_complete: # set a pin's mode for tone operations loop.run_until_complete(board.set_pin_mode_tone(3)) The line above sets pin 3's mode to tone mode . The loop_run_until_complete method schedules the method to be run. When that method completes, the next line of code in the script executes. This is very similar to coding a non-asyncio application. NOTE: If the method you are calling contains, a while True: loop, the method will never return. After performing several direct calls to the APIa graceful shutdown of the application is performed.","title":"Calling Pymata Express Async Methods From A Non-Async Function"},{"location":"guidelines/#creating-your-own-asyncio-functions-that-call-the-pymataexpress-api","text":"Another method of creating a PymataExpress application, is to create your own asyncio functions that will call the API methods within themselves. Let's look at the analog_input.py example to illustrate. import asyncio import sys from pymata_express.pymata_express import PymataExpress # Setup a pin for analog input and monitor its changes async def the_callback(data): \"\"\" A callback function to report data changes. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" print(\"analog callback data: \", data[1]) async def analog_in(my_board, pin): \"\"\" This function establishes the pin as an analog input. Any changes on this pin will be reported through the call back function. Also, the differential parameter is being used. The callback will only be called when there is difference of 5 or more between the current and last value reported. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" await my_board.set_pin_mode_analog_input(pin, callback=the_callback, differential=5) # run forever waiting for input changes while True: await asyncio.sleep(1) # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() try: # start the main function loop.run_until_complete(analog_in(board, 2)) except (KeyboardInterrupt, RuntimeError) as e: loop.run_until_complete(board.shutdown()) sys.exit(0) This example sets a pin to analog input mode. It provides a callback function to handle data sent from the Arduino, and an asyncio function called analog_in that forms the main asyncio body of our program. The program begins by retrieving the event loop and then instantiates the PymataExpress class: # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = PymataExpress() Next it invokes our main asyncio method, analog_in : # start the main function loop.run_until_complete(analog_in(board, 2)) The PymataExpress instance is passed to this function as the first parameter and the pin number we wish to use as the second parameter. Let's look at analog_in : async def analog_in(my_board, pin): \"\"\" This function establishes the pin as an analog input. Any changes on this pin will be reported through the call back function. Also, the differential parameter is being used. The callback will only be called when there is difference of 5 or more between the current and last value reported. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" await my_board.set_pin_mode_analog_input(pin, callback=the_callback, differential=5) # run forever waiting for input changes while True: await asyncio.sleep(1) This method sets the pin mode for the pin we select to be an analog input pin. We pass set_pin_mode_analog_input , a PymataExpress API method, three parameters - the pin number, a callback method, and a differential value.","title":"Creating Your Own Asyncio Functions That Call The PymataExpress API"},{"location":"guidelines/#the-differential-value-parameter","text":"When a pin's mode is set to analog input, the Arduino will immediately begin streaming the data value for that pin. It does this continuously whether the value changes or not. We may wish to throttle when the callback function or method is called by comparing the current value sent by the Arduino and the difference between the last and the current values. If the differential threshold value is exceeded, the callback will be invoked. So for example, let's say we wish to only have the callback function invoked when there is a value difference of 5 between the latest value and the previous one. To do so, we set the differential parameter to 5, and if the last value for example was 1020, the callback will be invoked if the latest value exceeds either 1015 or 1020. The default differential value is 1, but if you wish to receive all streaming data, set it to 0.","title":"The differential Value Parameter"},{"location":"guidelines/#the-while-loop","text":"Notice that this program will run forever until the user exits it by entering a Control-C on the keyboard. The loop sleeps for one second and uses the asyncio.sleep method to do so. NOTE: You must use asyncio.sleep when you wish to call sleep from within an asyncio function or method. Since the loop does not perform any other processing, the sleep time could be set to any value. The program does not wait for a second to receive the next data change. The data change is reported immediately in the callback function. The sleep just keeps the event loop up and running, allowing all other asyncio functions to run.","title":"The While Loop"},{"location":"guidelines/#the-callback-function","text":"This is a simple asyncio function that simply prints out the latest data value.","title":"The Callback Function"},{"location":"guidelines/#creating-an-application-that-consists-of-a-set-of-concurrent-tasks","text":"One of the main reasons to use asyncio is to have the ability to build an application requiring concurrency, in a simple and direct way. This is illustrated in the concurrent_tasks.py example. import asyncio from pymata_express.pymata_express import PymataExpress class ConcurrentTasks: \"\"\" This program will run 3 concurrent asyncio tasks: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value \"\"\" def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task async def blink_led_1(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 async def blink_led_2(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 # Retrieve the asyncio event loop - used by exception loop = asyncio.get_event_loop() # Instantiate PyMataExpress my_board = PymataExpress() try: # Instantiate this class, passing in the # PymataExpress instance. ConcurrentTasks(my_board) except (KeyboardInterrupt, RuntimeError): # cleanup loop.run_until_complete(my_board.shutdown()) print('goodbye') This is a slightly more complex example in that the program uses a class to house its code. Let's look at it in some detail: As in the previous examples discussed, the coding template is used as a basis. At the top of of the file, modules are imported and the definition of the ConcurrentTasks class is specified.","title":"Creating An Application That Consists Of A Set Of Concurrent Tasks"},{"location":"guidelines/#concurrenttasks-class","text":"class ConcurrentTasks: \"\"\" This program will run 3 concurrent asyncio tasks: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value \"\"\" def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task async def blink_led_1(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 async def blink_led_2(self, pin, sleep): \"\"\" This is run as a task from async_init_and_run :param pin: Arduino Pin Number :param sleep: Blink time \"\"\" toggle = 0 while True: await self.board.digital_pin_write(pin, toggle) await asyncio.sleep(sleep) toggle ^= 1 The 3 concurrent tasks are created and run within the ConcurrentTasks class. These tasks are: 1. Blink an LED. 2. Blink an additional LED at a different rate than the first 3. Read a potentiometer and set the intensity of a third LED scaled to the potentiometer value Each task is implemented as a method within the ConcurrentTasks class.","title":"ConcurrentTasks Class"},{"location":"guidelines/#the-95_init__-method","text":"def __init__(self, board): \"\"\" Initialize the class :param board: a pymata express instance \"\"\" # get the event loop self.loop = board.get_event_loop() # save the PymataExpress instance self.board = board # establish pin numbers # digital pins self.white_led = 6 self.blue_led = 9 self.green_led = 10 # analog pin self.potentiometer = 2 # continue with init and run using an async method loop.run_until_complete(self.async_init_and_run()) This method accepts a PymataExpress instance to be used by the methods within the class. It establishes names for the various pins being used and then starts the program by calling the async_init_and_run method of the class. Because async_init_and_run is an async method, it is wrapped with run_until_complete : loop.run_until_complete(self.async_init_and_run())","title":"The __init__ Method"},{"location":"guidelines/#a-callback-method","text":"The class contains a callback method called potentiometer_change_callback .: async def potentiometer_change_callback(self, data): \"\"\" Call back to receive potentiometer changes. Scale the reported value between 0 and ~127 to control the green led. :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" scaled_value = data[1] // 4 await self.board.analog_write(self.green_led, scaled_value) This method receives the latest changes to the potentiometer values reported by the Arduino, and then scales the reported value to be between 0 and 127 so that it can control the intensity of the green LED. This is one of the 3 concurrent tasks that run simultaneously","title":"A Callback Method"},{"location":"guidelines/#the-two-additional-task-methods","text":"In addition to the callback method, the class contains 2 additional methods that will also be invoked as independent, concurrent tasks. Each of these methods ( blink_led_1 and blink_led_2 ) blink an LED at an independent rate. These 2 tasks will run in tandem with the callback task.","title":"The Two Additional Task Methods"},{"location":"guidelines/#the-main-method","text":"The main method of this class is named async_init_and_run . It sets the pin modes for the various pins, and for potentiometer pin, specifies the callback method for the potentiometer pin. NOTE: When the callback method is passed as a parameter to set_pin_mode_analog_input , only its name is used and not the parentheses. await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) Next, the blink tasks are created. The callback task is considered part of the main task, and so it does not have to be explicitly created and run. The tasks are created using the asyncio create_task task method, and then the tasks are started by awaiting each task. async def async_init_and_run(self): \"\"\" Initialize pin modes, create tasks and then run the tasks \"\"\" await self.board.set_pin_mode_digital_output(self.white_led) await self.board.set_pin_mode_digital_output(self.blue_led) await self.board.set_pin_mode_pwm(self.green_led) await self.board.set_pin_mode_analog_input(self.potentiometer, self.potentiometer_change_callback) # Create the 2 additional tasks white_led_task = asyncio.create_task(self.blink_led_1(self.white_led, 1)) blue_led_task = asyncio.create_task(self.blink_led_2(self.blue_led, .5)) # start the 2 tasks await white_led_task await blue_led_task At the bottom of the file, the event loop is retrieved, and an instance of PymataExpress is created. The ConcurrentTasks class is instantiated, passing it the PymataExpress instance. # Retrieve the asyncio event loop - used by exception loop = asyncio.get_event_loop() # Instantiate PyMataExpress my_board = PymataExpress() try: # Instantiate this class, passing in the # PymataExpress instance. ConcurrentTasks(my_board) except (KeyboardInterrupt, RuntimeError): # cleanup loop.run_until_complete(my_board.shutdown()) print('goodbye') The blink tasks will run forever, and whenever the Arduino sends a data change report for the potentiometer, it will be processed as well. This program runs very efficiently. On a Linux computer running an Intel Core i5-2500K CPU at 3.30GHz, CPU utilization is 5%.","title":"The Main Method"},{"location":"install_pymata_express/","text":"BEFORE YOU INSTALL Pymata Express requires that Python 3.7 or above be installed on your computer. Please see the Verifying/Installing Python 3.7 section of this document if you are unsure of the Python version you have installed. INSTALLING PYMATA EXPRESS To install Pymata Express on Linux and Mac computers, open a terminal window and type: sudo pip3 install pymata-express For Windows users type: pip install pymata-express The code for Pymata Express can be found on GitHub . ACCESSING THE ADVANCE FEATURE SET If you wish to use all the advanced features of Pymata Express, you will need to install the FirmataExpress Arduino sketch on your Arduino device. You can find the installation instructions here .","title":"Installing Pymata Express"},{"location":"install_pymata_express/#before-you-install","text":"Pymata Express requires that Python 3.7 or above be installed on your computer. Please see the Verifying/Installing Python 3.7 section of this document if you are unsure of the Python version you have installed.","title":"BEFORE YOU INSTALL"},{"location":"install_pymata_express/#installing-pymata-express","text":"To install Pymata Express on Linux and Mac computers, open a terminal window and type: sudo pip3 install pymata-express For Windows users type: pip install pymata-express The code for Pymata Express can be found on GitHub .","title":"INSTALLING PYMATA EXPRESS"},{"location":"install_pymata_express/#accessing-the-advance-feature-set","text":"If you wish to use all the advanced features of Pymata Express, you will need to install the FirmataExpress Arduino sketch on your Arduino device. You can find the installation instructions here .","title":"ACCESSING THE ADVANCE FEATURE SET"},{"location":"license/","text":"GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Remote Network Interaction; Use with the GNU General Public License. Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see http://www.gnu.org/licenses/ .","title":"License"},{"location":"python_3_7.install/","text":"VERIFYING THE PYTHON VERSION ON YOUR COMPUTER Pymata Express utilizes the latest advances of the Python 3.7 asyncio library. To check that you have Python 3.7 installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> INSTALLING PYTHON 3.7 Windows Users To install Python 3.7 or later, go to the Python home page, and download the latest 3.7 (or later) distribution for your operating system. If you have Python 2.7 installed, you do not need to remove it. During the installation process, if there is a checkbox to add Python 3.7 to your path, make sure it is checked before proceeding with the installation. Linux Users If you are using linux, here are the build and installation instructions sudo apt-get update sudo apt-get upgrade sudo apt-get dist-upgrade sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus sudo apt-get install build-essential libncursesw5-dev libgdbm-dev libc6-dev sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev sudo apt-get install libssl-dev openssl libreadline-dev libffi-dev cd ~ mkdir build cd build wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz tar -zxvf Python-3.7.2.tgz cd Python-3.7.2 ./configure make sudo make install Install pip For debian based distributions: sudo apt-get install pip3-python For all other distributions - refer to your distributions instructions. Mac Users Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Verify The Python Installation Use the procedure shown here to verify that you have successfully installed Python 3.7 on your computer.","title":"Verifying/Installing Python 3.7"},{"location":"python_3_7.install/#verifying-the-python-version-on-your-computer","text":"Pymata Express utilizes the latest advances of the Python 3.7 asyncio library. To check that you have Python 3.7 installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>>","title":"VERIFYING THE PYTHON VERSION ON YOUR COMPUTER"},{"location":"python_3_7.install/#installing-python-37","text":"","title":"INSTALLING PYTHON 3.7"},{"location":"python_3_7.install/#windows-users","text":"To install Python 3.7 or later, go to the Python home page, and download the latest 3.7 (or later) distribution for your operating system. If you have Python 2.7 installed, you do not need to remove it. During the installation process, if there is a checkbox to add Python 3.7 to your path, make sure it is checked before proceeding with the installation.","title":"Windows Users"},{"location":"python_3_7.install/#linux-users","text":"If you are using linux, here are the build and installation instructions sudo apt-get update sudo apt-get upgrade sudo apt-get dist-upgrade sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus sudo apt-get install build-essential libncursesw5-dev libgdbm-dev libc6-dev sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev sudo apt-get install libssl-dev openssl libreadline-dev libffi-dev cd ~ mkdir build cd build wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz tar -zxvf Python-3.7.2.tgz cd Python-3.7.2 ./configure make sudo make install Install pip For debian based distributions: sudo apt-get install pip3-python For all other distributions - refer to your distributions instructions.","title":"Linux Users"},{"location":"python_3_7.install/#mac-users","text":"Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py","title":"Mac Users"},{"location":"python_3_7.install/#verify-the-python-installation","text":"Use the procedure shown here to verify that you have successfully installed Python 3.7 on your computer.","title":"Verify The Python Installation"}]}